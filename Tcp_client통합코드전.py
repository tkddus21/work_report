import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QSizePolicy, QGraphicsPixmapItem
from trackbot_gui import Ui_MainWindow
from camera_popup import CameraPopupDialog 
from setting_popup import SettingPopupDialog
from alarm_popup import AlarmPopupDialog
from PyQt5.QtGui import QPixmap, QImage
import numpy as np
import time
import re

import socket
import json
from PyQt5.QtCore import QObject, pyqtSignal, QThread

from collections import OrderedDict

CONTROL_PORT = None
SEND_INAGE_PORT = None

WHITE_IMAGE_PATH = "/tmp/white_placeholder.png"
def generate_white_image(width=4000   , height=4096):
    img = QImage(width, height, QImage.Format_RGB888)
    img.fill(QtGui.QColor("white"))
    img.save(WHITE_IMAGE_PATH)


class TcpImageClientWorker(QThread):
    image_received = pyqtSignal(str)
    error_occurred = pyqtSignal(str)

    def __init__(self, host: str, port: int):
        super().__init__()
        self.host = host
        self.port = port
        self.sock = None
        self.running = False
        self.save_folder = "/home/krristudent/images"
        os.makedirs(self.save_folder, exist_ok=True)
        self.image_counter = 1

    def recv_exactly(self, size):
        data = b''
        while len(data) < size:
            more = self.sock.recv(size - len(data))
            if not more:
                raise ConnectionError("Ïó∞Í≤∞ ÎÅäÍπÄ")
            data += more
        return data

    def run(self):
        while True:  # Î¨¥Ìïú Î£®ÌîÑ: Ïó∞Í≤∞ ÎÅäÍ∏∞Î©¥ Îã§Ïãú ÏãúÎèÑ
            try:
                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.sock.connect((self.host, self.port))
                self.running = True
                print(f"[TCP-IMG] ÏÑúÎ≤Ñ Ïó∞Í≤∞Îê®: {self.host}:{self.port}")

                time.sleep(1)

                while self.running:
                    try:
                        size_bytes = self.recv_exactly(4)
                        img_size = int.from_bytes(size_bytes, byteorder='big')
                        print(f"[TCP-IMG] ÏàòÏã†Ìï† Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞: {img_size} bytes")

                        img_data = self.recv_exactly(img_size)

                        save_path = os.path.join(self.save_folder, f"scan_{self.image_counter}.png")
                        with open(save_path, 'wb') as f:
                            f.write(img_data)

                        time.sleep(2)
                        actual_size = os.path.getsize(save_path)
                        print(f"[DEBUG] Ï†ÄÏû•Îêú ÌååÏùº ÌÅ¨Í∏∞: {actual_size}")
                        print(f"[TCP-IMG] Ï†ÄÏû• ÏôÑÎ£å: {save_path}")
                        self.image_counter += 1
                        self.image_received.emit(save_path)

                    except Exception as e:
                        self.error_occurred.emit(f"[TCP-IMG RECV Ïò§Î•ò] {e}")
                        break  # ÎÇ¥Î∂Ä Î£®ÌîÑ ÌÉàÏ∂ú ‚Üí Ïó∞Í≤∞ Ï¢ÖÎ£å ‚Üí Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ

            except Exception as e:
                self.error_occurred.emit(f"[TCP-IMG Ïó∞Í≤∞ Ïã§Ìå®] {e}")

            finally:
                self.running = False
                if self.sock:
                    try:
                        self.sock.shutdown(socket.SHUT_RDWR)
                    except:
                        pass
                    self.sock.close()
                    self.sock = None
                print("[TCP-IMG] Ïó∞Í≤∞ Ï¢ÖÎ£åÎê®. 3Ï¥à ÌõÑ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...")
                time.sleep(3)



    def close(self):
        self.running = False
        if self.sock:
            try:
                self.sock.shutdown(socket.SHUT_RDWR)
            except:
                pass
            self.sock.close()
            self.sock = None

class TcpClientWorker(QThread):
    # üëâ ÏõåÏª§ ÎÇ¥Î∂Ä Ïã†Ìò∏
    distance_received = pyqtSignal(float)
    rpm_received = pyqtSignal(float, float)
    image_received = pyqtSignal(str)
    error_occurred = pyqtSignal(str)

    def __init__(self, host: str, port: int):
        super().__init__()
        self.host = host
        self.port = port
        self.sock = None
        self.running = False
        self.waiting_for = "header"
        self.header = None

    def run(self):
        while True:
            try:
                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.sock.connect((self.host, self.port))
                self.running = True
                print(f"[TCP] ÏÑúÎ≤Ñ Ïó∞Í≤∞Îê®: {self.host}:{self.port}")

                buffer = ""
                while self.running:
                    try:
                        raw_data = self.sock.recv(1024)
                        if not raw_data:
                            raise ConnectionError("ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ï¢ÖÎ£åÎê®")

                        try:
                            data = raw_data.decode()
                        except UnicodeDecodeError as e:
                            self.error_occurred.emit(f"[RECV ÎîîÏΩîÎî© Ïò§Î•ò]: {e}")
                            break

                        buffer += data
                        while '\n' in buffer:
                            line, buffer = buffer.split('\n', 1)
                            self.handle_line(line.strip())

                    except Exception as e:
                        self.error_occurred.emit(f"[RECV ÏòàÏô∏] {e}")
                        break

            except Exception as e:
                self.error_occurred.emit(f"[Ïó∞Í≤∞ Ïã§Ìå®] {e}")

            finally:
                self.running = False
                if self.sock:
                    try:
                        self.sock.shutdown(socket.SHUT_RDWR)
                    except:
                        pass
                    self.sock.close()
                    self.sock = None

                print(f"[TCP] {self.port} Ïû¨Ïó∞Í≤∞ ÎåÄÍ∏∞ Ï§ë...")
                time.sleep(3)  # Ïû¨ÏãúÎèÑ ÎåÄÍ∏∞


    def handle_line(self, line):
        if self.waiting_for == "header":
            try:
                self.header = json.loads(line)
                self.waiting_for = "body"
            except Exception as e:
                self.error_occurred.emit(f"[Ìó§Îçî ÌååÏã± Ïò§Î•ò] {e}")

        elif self.waiting_for == "body":
            try:
                body = json.loads(line)
                checksum = body.pop("checksum", -1)
                body_str = json.dumps(body)
                expected = self.calculate_checksum(body_str)

                if checksum != expected:
                    print("‚ö†Ô∏è checksum mismatch")
                    self.waiting_for = "header"
                    return

                self.process_message(self.header["type"], body)
                self.waiting_for = "header"
            except Exception as e:
                self.error_occurred.emit(f"[Î≥∏Î¨∏ ÌååÏã± Ïò§Î•ò] {e}")
                self.waiting_for = "header"

    def process_message(self, type_str, body):
        if type_str == "distance":
            self.distance_received.emit(body["value"])
        elif type_str == "wheel_rpm":
            self.rpm_received.emit(body["left"], body["right"])
        elif type_str == "image":
            self.image_received.emit(body["data"])
        else:
            self.error_occurred.emit(f"Ïïå Ïàò ÏóÜÎäî ÌÉÄÏûÖ: {type_str}")

    def calculate_checksum(self, data_str):
        return sum(bytearray(data_str.encode())) % 256

    def send_rpm(self, left: float, right: float):
        if self.sock is None:
            self.error_occurred.emit("ÏÜåÏºìÏù¥ Ïó¥Î†§ÏûàÏßÄ ÏïäÏùå")
            return

        body_dict = {"left": left, "right": right}
        body_json = json.dumps(body_dict)
        header = {"type": "cmd_rpm", "length": len(body_json.encode())}

        checksum = self.calculate_checksum(body_json)
        body_dict["checksum"] = checksum
        full_body_json = json.dumps(body_dict)

        try:
            self.sock.sendall((json.dumps(header) + '\n').encode())
            self.sock.sendall((full_body_json + '\n').encode())
            print(f"[SEND] L={left}, R={right}")
        except Exception as e:
            self.error_occurred.emit(f"[ÏÜ°Ïã† Ïò§Î•ò] {e}")

    def close(self):
        self.running = False
        if self.sock:
            try:
                self.sock.shutdown(socket.SHUT_RDWR)
            except:
                pass
            self.sock.close()
            self.sock = None


class TcpClient(QObject):
    # üëâ Ïô∏Î∂ÄÏóê ÎÖ∏Ï∂úÌïòÎäî Ïã†Ìò∏
    distance_received = pyqtSignal(float)
    rpm_received = pyqtSignal(float, float)
    image_received = pyqtSignal(str)
    error_occurred = pyqtSignal(str)

    def __init__(self, port: int, host: str = "0.tcp.jp.ngrok.io"):
        super().__init__()
        self.worker = TcpClientWorker(host, port)

        # Ïã†Ìò∏ Ïó∞Í≤∞
        self.worker.distance_received.connect(self.distance_received)
        self.worker.rpm_received.connect(self.rpm_received)
        self.worker.image_received.connect(self.image_received)
        self.worker.error_occurred.connect(self.error_occurred)

    def connect_to_server(self):
        self.worker.start()

    def send_rpm(self, left: float, right: float):
        self.worker.send_rpm(left, right)

    def disconnect(self):
        self.worker.close()
        self.worker.wait()  # Ïä§Î†àÎìú ÏôÑÏ†ÑÌûà Ï¢ÖÎ£å ÎåÄÍ∏∞


#Pixmap optimization
class PixmapCache:
    def __init__(self, max_size=10):
        self.cache = OrderedDict()
        self.max_size = max_size

    def get_pixmap(self, path):
        if path in self.cache:
            pixmap = self.cache.pop(path)
            self.cache[path] = pixmap
            return pixmap

        pixmap = QPixmap(path)
        if pixmap.isNull():
            return None

        if len(self.cache) >= self.max_size:
            self.cache.popitem(last=False)  # Í∞ÄÏû• Ïò§ÎûòÎêú Í≤É Ï†úÍ±∞

        self.cache[path] = pixmap
        return pixmap
    
    def invalidate(self, path):

        if path in self.cache:
            del self.cache[path]


# üìå Ïª§Ïä§ÌÖÄ QGraphicsView: ÎßàÏö∞Ïä§ ÏúÑÏπò Îî∞Îùº ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄ ÌëúÏãú
class LineCameraView(QtWidgets.QGraphicsView):
    
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMouseTracking(True)

        # ÌôïÎåÄÏö© ÏïÑÏù¥ÌÖú (Í∏∞Ï°¥ Í∏∞Îä• Ïú†ÏßÄ)
        self.zoom_item = None

        # Î∞ïÏä§ Í∑∏Î¶¨Í∏∞ ÏÉÅÌÉú
        self.drawing_box = False
        self.start_pos = None
        self.rubber_band_item = None

        # Î∞ïÏä§ Í¥ÄÎ¶¨
        self.box_items = []
        self.selected_box = None



    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            scene_pos = self.mapToScene(event.pos())

            # Í∏∞Ï°¥ Î∞ïÏä§ ÌÅ¥Î¶≠ÌñàÎäîÏßÄ ÌôïÏù∏
            clicked_items = self.scene().items(scene_pos)
            for item in clicked_items:
                if isinstance(item, QtWidgets.QGraphicsRectItem):
                    self.select_box(item)
                    return

            self.clear_selection()

            # ÏÉà Î∞ïÏä§ Í∑∏Î¶¨Í∏∞ ÏãúÏûë
            self.drawing_box = True
            self.start_pos = scene_pos

            # Ïù¥Ï†Ñ Î∞ïÏä§ Ï†úÍ±∞
            if self.rubber_band_item:
                self.scene().removeItem(self.rubber_band_item)
                self.rubber_band_item = None



    def mouseMoveEvent(self, event):
    # üîç Í∏∞Î≥∏ ÌôïÎåÄ Í∏∞Îä• Ïú†ÏßÄ
        super().mouseMoveEvent(event)
        
        # blue Î∞ïÏä§ ÎìúÎ°úÏûâ (Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ)
        if self.drawing_box and self.start_pos:
            end_pos = self.mapToScene(event.pos())
            rect = QtCore.QRectF(self.start_pos, end_pos).normalized()

            if self.rubber_band_item:
                self.rubber_band_item.setRect(rect)
            else:
                pen = QtGui.QPen(QtGui.QColor(0, 120, 255), 2, QtCore.Qt.DashLine)
                self.rubber_band_item = self.scene().addRect(rect, pen)

        if not self.zoom_item:
            return

        scene_pos = self.mapToScene(event.pos())
        items = self.scene().items(scene_pos)

        for item in items:
            if isinstance(item, QGraphicsPixmapItem):
                pixmap = item.pixmap()
                local_pos = item.mapFromScene(scene_pos)

                x = int(local_pos.x())
                y = int(local_pos.y())

                # üîç ÌôïÎåÄ Î∞ïÏä§ ÌÅ¨Í∏∞ (Ï†ïÏÇ¨Í∞ÅÌòï)
                zoom_box_size = 100
                half_size = zoom_box_size // 2

                # üîç ÌôïÎåÄ ÏòÅÏó≠ ÏÇ¨Í∞ÅÌòï (Ïù¥ÎØ∏ÏßÄ Î≤îÏúÑ ÎÑòÏßÄ ÏïäÎèÑÎ°ù intersect)
                rect = QtCore.QRect(x - half_size, y - half_size, zoom_box_size, zoom_box_size)
                rect = rect.intersected(pixmap.rect())

                if rect.isValid():
                    cropped = pixmap.copy(rect)

                    # ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄ Î≥¥Ïó¨Ï§Ñ Î∑∞Ìè¨Ìä∏ ÌÅ¨Í∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
                    view_size = self.zoom_item.scene().views()[0].viewport().size()
                    target_width = view_size.width()
                    target_height = view_size.height()

                    # ‚úÖ ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄ ÎπÑÏú® Ïú†ÏßÄÌïòÎ©∞ ÍΩâ Ï±ÑÏö∞Í∏∞
                    scaled = cropped.scaled(
                        target_width, target_height,
                        QtCore.Qt.KeepAspectRatioByExpanding,
                        QtCore.Qt.SmoothTransformation
                    )

                    # ‚úÖ ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄ Ï§ëÏïô Ï†ïÎ†¨
                    offset_x = (target_width - scaled.width()) / 2
                    offset_y = (target_height - scaled.height()) / 2

                    self.zoom_item.setPixmap(scaled)
                    self.zoom_item.setPos(offset_x, offset_y)

                    # ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄ Ïã†Ìò∏ Î∞úÏÉù (ÌïÑÏöî Ïãú Ïó∞Í≤∞ Í∞ÄÎä•)
                    if hasattr(self.parent(), "zoom_updated"):
                        self.parent().zoom_updated.emit(scaled)
                return

        # ÌôïÎåÄÌï† Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ ÌÅ¥Î¶¨Ïñ¥
        self.zoom_item.setPixmap(QtGui.QPixmap())


    def mouseReleaseEvent(self, event):
        if self.drawing_box and event.button() == QtCore.Qt.LeftButton:
            self.drawing_box = False
            end_pos = self.mapToScene(event.pos())
            rect = QtCore.QRectF(self.start_pos, end_pos).normalized()

            # ÎÑàÎ¨¥ ÏûëÏùÄ Í±¥ Î¨¥Ïãú
            if rect.width() > 5 and rect.height() > 5:
                box = self.scene().addRect(rect, QtGui.QPen(QtGui.QColor(255, 0, 0), 2))
                box.setFlag(QtWidgets.QGraphicsItem.ItemIsSelectable)
                box.setZValue(1)
                self.box_items.append(box)

                # ‚úÖ ÏûêÎèô Ï†ÄÏû•
                if hasattr(self.window(), "save_boxes_for_image") and hasattr(self.parent(), "current_img_index"):
                    self.window().save_boxes_for_image()
            # ÏûÑÏãú Î∞ïÏä§ Ï†úÍ±∞
            if self.rubber_band_item:
                self.scene().removeItem(self.rubber_band_item)
                self.rubber_band_item = None

            self.start_pos = None

        super().mouseReleaseEvent(event)

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_Delete and self.selected_box:
            self.scene().removeItem(self.selected_box)
            if self.selected_box in self.box_items:
                self.box_items.remove(self.selected_box)
            self.selected_box = None

            # ‚úÖ ÏûêÎèô Ï†ÄÏû•
            if hasattr(self.window(), "save_boxes_for_image") and hasattr(self.parent(), "current_img_index"):
                self.window().save_boxes_for_image()
        else:
            super().keyPressEvent(event)

    def select_box(self, box_item):
        if self.selected_box:
            self.selected_box.setPen(QtGui.QPen(QtGui.QColor(255, 0, 0), 2))  # ÏÑ†ÌÉù Ìï¥Ï†ú Ïãú Îπ®Í∞ÑÏÉâ Î≥µÍ∑Ä

        self.selected_box = box_item
        box_item.setPen(QtGui.QPen(QtGui.QColor(0, 255, 0), 2))  # ÏÑ†ÌÉù Ïãú Ï¥àÎ°ùÏÉâ

    def clear_selection(self):
        if self.selected_box:
            self.selected_box.setPen(QtGui.QPen(QtGui.QColor(255, 0, 0), 2))
            self.selected_box = None



# üîß Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïú†Ìã∏  #width , height value Î≥ÄÍ≤ΩÍ∞ÄÎä•ÌïòÍ≤å
# green, red image Ï±ÑÏö∞Îäî Ìï®Ïàò
def generate_green_background(value: float, width=3200, height=120) -> QtGui.QPixmap:
    image = QtGui.QImage(width, height, QtGui.QImage.Format_ARGB32)
    image.fill(QtCore.Qt.transparent)
    painter = QtGui.QPainter(image)
    painter.setBrush(QtGui.QColor(0, 255, 0, 120))  # Î∞òÌà¨Î™Ö ÎÖπÏÉâ
    painter.setPen(QtCore.Qt.NoPen)
    painter.drawRect(0, 0, int(width * value), height)
    painter.end()
    return QtGui.QPixmap.fromImage(image)


def generate_red_lines_image(values: list[float], width=3200, height=120) -> QtGui.QPixmap:
    image = QtGui.QImage(width, height, QtGui.QImage.Format_ARGB32)
    image.fill(QtCore.Qt.transparent)
    painter = QtGui.QPainter(image)
    pen = QtGui.QPen(QtGui.QColor(255, 0, 0, 180))
    pen.setWidth(4)
    painter.setPen(pen)

    for v in values:
        if 0.0 <= v <= 1.0:  # ‚úÖ ÏïàÏ†Ñ Ï≤¥ÌÅ¨
            x = int(v * width)
            painter.drawLine(x, 0, x, height)
    painter.end()
    return QtGui.QPixmap.fromImage(image)



class TrackBotApp(QMainWindow):
    zoom_updated = QtCore.pyqtSignal(QtGui.QPixmap)
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowTitle("TrackBot GUI")

        self.image_num = 10  # Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ Ïàò

        # ÎØ∏Î¶¨ white placeholder Ïù¥ÎØ∏ÏßÄ Ï§ÄÎπÑ
        generate_white_image()

        # Ïù¥ÎØ∏ÏßÄ ÎîîÎ†âÌÜ†Î¶¨
        self.image_dir = "/home/krristudent/images"  # ÏõêÌïòÏãúÎäî Í≤ΩÎ°úÎ°ú Î∞îÍøîÎèÑ Îê©ÎãàÎã§
        os.makedirs(self.image_dir, exist_ok=True)

        self.image_paths = self.load_images_from_directory(self.image_dir)
        while len(self.image_paths) < self.image_num:
            placeholder = os.path.join(self.image_dir, f"scan_{len(self.image_paths)+1}.png")
            QtGui.QImage(WHITE_IMAGE_PATH).save(placeholder)
            self.image_paths.append(placeholder)


        self.update_tool_button_style()  # Ï¥àÍ∏∞ Ïä§ÌÉÄÏùº Í∞ïÏ†ú Ï†ÅÏö©

        self.pixmap_cache = PixmapCache(max_size=10)

        # Ï∞Ω ÌÅ¨Í∏∞ ÏÑ§Ï†ï
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.setMinimumSize(1400, 800)

        central_widget = self.centralWidget()
        if central_widget:
            central_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.popup = None
        self.setting_popup = None
        self.alarm_popup = None


        self.box_data = {}  # Ïù¥ÎØ∏ÏßÄ Ïù∏Îç±Ïä§ ‚ûú Î∞ïÏä§ Î¶¨Ïä§Ìä∏ Ï†ÄÏû•


        # ÎÖπÌôî Î≤ÑÌäº ÌÜ†Í∏Ä
        self.ui.toolButton.setCheckable(True)
        self.ui.toolButton.clicked.connect(self.toggle_recording)

        # rpm_tcp
        self.rpm_timer = QtCore.QTimer()
        self.rpm_timer.timeout.connect(self.send_rpm_tcp)
        self.rpm_timer.start(100)  # 100ms(0.1sce) Í∞ÑÍ≤©


        # üéÆ Ï°∞Ïù¥Ïä§Ìã± Ïä¨ÎùºÏù¥Îçî Ï¥àÍ∏∞Ìôî Î∞è Î≥µÍ∑Ä
        self.ui.left.setMinimum(-100)
        self.ui.left.setMaximum(100)
        self.ui.left.setValue(0)
        self.ui.left.sliderReleased.connect(lambda: self.ui.left.setValue(0))
        self.ui.left.valueChanged.connect(self.send_rpm_tcp)

        self.ui.right.setMinimum(-100)
        self.ui.right.setMaximum(100)
        self.ui.right.setValue(0)
        self.ui.right.sliderReleased.connect(lambda: self.ui.right.setValue(0))
        self.ui.right.valueChanged.connect(lambda v: print(f"[üîç Ï§å] Í∞í: {v}"))


        # Î∞©Ìñ• Î≤ÑÌäº
        self.ui.up_button.pressed.connect(lambda: self.send_command("move up"))
        self.ui.up_button.released.connect(lambda: self.send_command("stop"))
        self.ui.down_button.pressed.connect(lambda: self.send_command("move down"))
        self.ui.down_button.released.connect(lambda: self.send_command("stop"))
        self.ui.left_button.pressed.connect(lambda: self.send_command("move left"))
        self.ui.left_button.released.connect(lambda: self.send_command("stop"))
        self.ui.right_button.pressed.connect(lambda: self.send_command("move right"))
        self.ui.right_button.released.connect(lambda: self.send_command("stop"))



        # Î™ÖÎ†π Î≤ÑÌäº
        self.ui.auto_drive_button.clicked.connect(lambda: self.send_command("üöó ÏûêÏú® Ï£ºÌñâ ÏãúÏûë"))
        self.ui.alarm_button.clicked.connect(lambda: self.send_command("üîî ÏïåÎûå Î∞úÎèô"))
        self.ui.return_button.clicked.connect(lambda: self.send_command("‚Ü©Ô∏è Î≥µÍ∑Ä Î™ÖÎ†π"))
        self.ui.setting_button.clicked.connect(lambda: self.send_command("‚öôÔ∏è ÏÑ§Ï†ï Ïã§Ìñâ"))



        # ÌåùÏóÖ Ïó¥Í∏∞
        self.ui.alarm_button.clicked.connect(self.toggle_alarm_popup)
        self.ui.setting_button.clicked.connect(self.toggle_setting_popup)
        

        #ÎèÑÎ©¥ Î≤àÌò∏ Ï†ÑÏö© Scene Ï∂îÍ∞Ä
        self.image_scene = QtWidgets.QGraphicsScene()
        self.label_scene = QtWidgets.QGraphicsScene()
        self.custom_line_camera = LineCameraView(self)

        self.custom_line_camera.setScene(self.image_scene)
        self.custom_line_camera.setSizePolicy(QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # QSplitter Í∏∞Î∞ò ÍµêÏ≤¥
        splitter: QtWidgets.QSplitter = self.ui.leftSplitter
        index = splitter.indexOf(self.ui.LineCamera)
        splitter.insertWidget(index, self.custom_line_camera)
        self.ui.LineCamera.deleteLater()
        self.ui.LineCamera = self.custom_line_camera

        
        # üìç Ïä§ÌÅ¨Î°§ Ï†úÍ±∞ ÏÑ§Ï†ï Ï∂îÍ∞Ä!
        self.custom_line_camera.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.custom_line_camera.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        
        
        # üîé EventCamera ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄÏö© Scene Íµ¨ÏÑ±
        self.zoom_scene = QtWidgets.QGraphicsScene()
        self.zoom_item = QtWidgets.QGraphicsPixmapItem()
        self.zoom_scene.addItem(self.zoom_item)
        self.ui.EventCamera.setScene(self.zoom_scene)
        self.custom_line_camera.zoom_item = self.zoom_item

        
        # üéØ ÌôïÎåÄ Î∑∞ Ïä§ÌÅ¨Î°§ Ï†úÍ±∞
        self.ui.EventCamera.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.ui.EventCamera.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        
        # ÎèÑÎ©¥ Î≤àÌò∏ Î∑∞ ÏÑ§Ï†ï
        self.ui.drawingNumberView.setScene(self.label_scene)


        # üéØ ÎèÑÎ©¥ Î∑∞ Ïä§ÌÅ¨Î°§ Ï†úÍ±∞
        self.ui.drawingNumberView.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.ui.drawingNumberView.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)


        self.image_paths = self.load_images_from_directory(self.image_dir)
 

        #problem
        sample_pixmap = QPixmap(self.image_paths[0])
        self.image_width = sample_pixmap.width()
        self.image_height = sample_pixmap.height()

        # Ïû¨ÏÑ§Ï†ï
        self.image_scene = QtWidgets.QGraphicsScene()
        self.label_scene = QtWidgets.QGraphicsScene()
        self.ui.LineCamera.setScene(self.image_scene)
        self.ui.drawingNumberView.setScene(self.label_scene)



        # Ï¥àÍ∏∞ Î†åÎçîÎßÅ ÏôÑÎ£å ÌõÑ Ïä¨ÎùºÏù¥Îî© Í∞±Ïã†
        QtCore.QTimer.singleShot(0, lambda: self.update_sliding_window(self.ui.horizontalScrollBar.value()))
        self.ui.horizontalScrollBar.setStyleSheet("background: transparent;")
        self.ui.horizontalScrollBar_2.setStyleSheet("background: transparent;")

        # Ïä¨ÎùºÏù¥Îçî ÏúÑÏóê Ïù¥ÎØ∏ÏßÄÏö© QLabel Ï∂îÍ∞Ä
        self.green_background_label = QtWidgets.QLabel(self.ui.sliderContainer)
        self.redline_background_label = QtWidgets.QLabel(self.ui.sliderContainer)

        self.green_background_label.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents)
        self.redline_background_label.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents)

        # QLabelÏù¥ Îí§Î°ú Í∞ÄÍ≤å
        self.green_background_label.lower()
        self.redline_background_label.lower()

        # Î∞∞Í≤Ω Ìà¨Î™Ö Ï≤òÎ¶¨
        self.ui.horizontalScrollBar.setStyleSheet("background: transparent;")
        self.ui.horizontalScrollBar_2.setStyleSheet("background: transparent;")

        # ‚úÖ Ïó¨Í∏∞ÏÑú Ìò∏Ï∂ú! QLabelÏù¥ Ïù¥ÎØ∏ Ï†ïÏùòÎêú ÏÉÅÌÉú
        self.setup_scene_with_sliding_window()
        

        # Ï¥àÍ∏∞ Ïä¨ÎùºÏù¥Îî© Î∞è Ïù¥ÎØ∏ÏßÄ
        QtCore.QTimer.singleShot(0, lambda: self.update_sliding_window(self.ui.horizontalScrollBar.value()))
        self.green_background_label.setPixmap(generate_green_background(0.0))
        self.redline_background_label.setPixmap(generate_red_lines_image([]))

        #Ïä¨ÎùºÏù¥Îçî Î∞òÌà¨Î™Ö Í∑∏Î¶∞ Ï±ÑÏö∞Îäî Ìï®Ïàò(ÎπÑÏú® 0~1Î°ú Í∑∏Î¶º)
        self.update_green_slide(0.9)

        #Ïä¨ÎùºÏù¥Îçî Î†àÎìú ÎùºÏù∏ Í∑∏Î¶¨Îäî Ìï®Ïàò(ÎπÑÏú® 0~1Î°ú  Í∑∏Î¶º)
        self.update_red_lines([0.15, 0.9])

        #TCP ÏÜåÏºì Ïó∞Í≤∞ Ï∂îÍ∞Ä
        self.max_rpm = 300.0  # ÏµúÎåÄ RPM Í∞í
        self.tcp_connected = False

        # # TCP Ïó∞Í≤∞ ÏÑ§Ï†ï

        self.tcp_client = TcpClient(port=CONTROL_PORT)
        self.tcp_client.connect_to_server()
        
        self.tcp_client.distance_received.connect(self.handle_distance)
        self.tcp_client.rpm_received.connect(self.handle_rpm)
        self.tcp_client.error_occurred.connect(lambda msg: print(f"[TCP Ïò§Î•ò] {msg}"))


        # TrackBotApp.__init__ ÎÇ¥Î∂ÄÏóê Ï∂îÍ∞Ä
        self.image_client = TcpImageClientWorker(host="0.tcp.jp.ngrok.io", port=14654)
        self.image_client.image_received.connect(self.handle_image_received)
        self.image_client.error_occurred.connect(lambda msg: print(f"[TCP-IMG Ïò§Î•ò] {msg}"))
        self.image_client.start()

    
    
    def handle_image_received(self, path: str):
        print(f"[GUI] Ïù¥ÎØ∏ÏßÄ ÏàòÏã† ÏôÑÎ£å: {path}")
         
        # Ï∫êÏãú Î¨¥Ìö®Ìôî
        self.pixmap_cache.invalidate(path)

        # ÌòÑÏû¨ Ïä¨ÎùºÏù¥Îçî Í∞íÏúºÎ°ú Ïù¥ÎØ∏ÏßÄ Îã§Ïãú Î†åÎçîÎßÅ
        self.update_sliding_window(self.ui.horizontalScrollBar.value())


    def handle_distance(self, value: float):
        print(f"[ÏàòÏã†] Ï¥ù Ï£ºÌñâ Í±∞Î¶¨: {value:.2f} m")
        if self.alarm_popup:
            self.alarm_popup.update_distance(value)

    def handle_rpm(self, left: float, right: float):
        print(f"[ÏàòÏã†] Ï¢åÏö∞ RPM: L={left:.1f}, R={right:.1f}")
        if self.alarm_popup:
            self.alarm_popup.update_motor_status(left, right)
            

    # Í±∞Î¶¨ Ï†ïÎ≥¥: {"type": "distance", "value": float}
    # Î∞îÌÄ¥ RPM: {"type": "wheel_rpm", "left": float, "right": float}
    def handle_tcp_data(self, data_str):
        try:
            json_obj = json.loads(data_str)
            msg_type = json_obj.get("type")

            if msg_type == "distance":
                distance = json_obj.get("value", None)
                if distance is not None:
                    print(f"[ÏàòÏã†] Ï¥ù Ï£ºÌñâ Í±∞Î¶¨: {distance:.2f} m")
                    if self.alarm_popup:
                        self.alarm_popup.update_distance(distance)
                    # Ïòà: Í±∞Î¶¨ ÌëúÏãúÏö© UIÏóê ÏóÖÎç∞Ïù¥Ìä∏ Í∞ÄÎä•
                    # self.ui.distance_label.setText(f"{distance:.2f} m")

            elif msg_type == "wheel_rpm":
                left = json_obj.get("left", None)
                right = json_obj.get("right", None)
                if left is not None and right is not None:
                    print(f"[ÏàòÏã†] Ï¢åÏö∞ RPM: L={left:.1f}, R={right:.1f}")
                    if self.alarm_popup:
                        self.alarm_popup.update_motor_status(left, right)
                    # Ïòà: ÏÉÅÌÉú ÌëúÏãú, Í∑∏ÎûòÌîÑ Î∞òÏòÅ Îì± Í∞ÄÎä•
                    # self.ui.rpm_label.setText(f"L: {left:.1f}, R: {right:.1f}")

            else:
                print(f"[Í≤ΩÍ≥†] Ïïå Ïàò ÏóÜÎäî ÌÉÄÏûÖ: {msg_type}")

        except json.JSONDecodeError:
            print("[ÏóêÎü¨] JSON ÌååÏã± Ïã§Ìå®")
        except Exception as e:
            print(f"[ÏòàÏô∏] Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")


    # Ïä¨ÎùºÏù¥Îî© ÏúàÎèÑÏö∞ üöó RPM Ï†ÑÏÜ°
    def send_rpm_tcp(self):
        rpm = int((self.ui.left.value() / 100.0) * self.max_rpm)       
        self.tcp_client.send_rpm(left=rpm, right=rpm)
        print(f"üöó RPM Ï†ÑÏÜ°: {rpm:}")


    # Ïä¨ÎùºÏù¥Îçî ÎÖπÏÉâ ÎπÑÏú® ÏóÖÎç∞Ïù¥Ìä∏
    def update_green_slide(self, input : float):
        green_ratio = input
        self.green_background_label.setPixmap(
            generate_green_background(
                green_ratio,
                width=self.ui.horizontalScrollBar.width(),
                height=self.ui.horizontalScrollBar.height()
            )
        )
    
    

    def update_red_lines(self, float_list: list[float]):
        red_image = generate_red_lines_image(
            values=float_list,
            width=self.ui.horizontalScrollBar_2.width(),
            height=self.ui.horizontalScrollBar_2.height()
        )
        self.redline_background_label.setPixmap(red_image)
                


    # Ï∂îÌõÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÍ±∞ÎÇò, Ïù¥ÎØ∏ÏßÄÍ∞Ä Ï∑®Ìï©Îê† Îïå Í∞±Ïã†
    def set_collected_images(self, count: int):
        self.collected_images = count
        self.update_green_slide()

    #Î∞ïÏä§ Îç∞Ïù¥ÌÑ∞Î•º Î°úÎî©
    def load_boxes_for_image(self, img_index: int):
        return self.box_data.get(img_index, [])


    # Ïù¥ÎØ∏ÏßÄ ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú Í∑∏Î¶¨Í∏∞
    #offsetÏùÄ Ïä¨ÎùºÏù¥Îçî ÏúÑÏπòÏóê Îî∞Îùº Ï°∞Ï†ï
    def draw_boxes_on_scene(self, boxes, scene_width, scene_height, x_offset=0, img_index=None):
        
        for idx, (xc, yc, w, h) in enumerate(boxes):
            # Ï¢åÌëú Í≥ÑÏÇ∞
            box_w = w * scene_width
            box_h = h * scene_height
            top_left_x = (xc - w / 2) * scene_width + x_offset
            top_left_y = (yc - h / 2) * scene_height

            rect = QtCore.QRectF(top_left_x, top_left_y, box_w, box_h)
            pen = QtGui.QPen(QtGui.QColor(255, 0, 0), 2)
            box = self.image_scene.addRect(rect, pen)
            box.setFlag(QtWidgets.QGraphicsItem.ItemIsSelectable)
            box.setZValue(2)
            self.custom_line_camera.box_items.append(box)

            # üî¢ Î∞ïÏä§ ÏúÑÏóê ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
            if img_index is not None:
                text_item = QtWidgets.QGraphicsTextItem(f"{img_index + 1}")
                font = QtGui.QFont("Arial", 10, QtGui.QFont.Bold)
                text_item.setFont(font)
                text_item.setDefaultTextColor(QtGui.QColor("blue"))
                text_item.setPos(top_left_x + 5, top_left_y + 5)
                text_item.setZValue(3)
                self.image_scene.addItem(text_item)
            
        
        




    # Î∞ïÏä§ Ï†ÄÏû•
    def save_boxes_for_image(self):
        temp_box_data = {}
        
        for item in self.custom_line_camera.box_items:
            if not isinstance(item, QtWidgets.QGraphicsRectItem):
                continue

            rect = item.rect()
            top_left = item.scenePos()
            center_x = top_left.x() + rect.x() + rect.width() / 2
            center_y = top_left.y() + rect.y() + rect.height() / 2

            # üß† Ï†ïÌôïÌïú Ïù¥ÎØ∏ÏßÄ Ïù∏Îç±Ïä§ Ï∞æÍ∏∞
            matched_img_index = None
            for img_index, offset in enumerate(self.image_offsets):
                if img_index >= len(self.scaled_pixmaps):
                    continue
                img_width = self.scaled_pixmaps[img_index].width()
                if offset <= center_x < offset + img_width:
                    matched_img_index = img_index
                    break

            if matched_img_index is None:
                print(f"‚ö†Ô∏è Î∞ïÏä§ ÏúÑÏπòÍ∞Ä Ïù¥ÎØ∏ÏßÄ Î≤îÏúÑÎ•º Î≤óÏñ¥ÎÇ®: center_x={center_x}")
                continue

            pixmap = self.scaled_pixmaps[matched_img_index]
            img_offset = self.image_offsets[matched_img_index]
            img_width = pixmap.width()
            img_height = pixmap.height()

            # Ï†ïÍ∑úÌôîÎêú Ï¢åÌëúÍ≥ÑÎ°ú Ï†ÄÏû• (YOLO ÌòïÏãù Ïú†ÏÇ¨)
            local_x = center_x - img_offset
            x_center = local_x / img_width
            y_center = center_y / img_height
            width = rect.width() / img_width
            height = rect.height() / img_height

            temp_box_data.setdefault(matched_img_index, []).append((x_center, y_center, width, height))

        # ‚úÖ Î≥ëÌï© Ï†ÄÏû•
        for img_index, boxes in temp_box_data.items():
            self.box_data[img_index] = boxes

        # ‚úÖ ÎîîÎ≤ÑÍ∑∏ Ï∂úÎ†•
        print("\nüì¶ Î∞ïÏä§ Ï†ÄÏû• ÏôÑÎ£å:")
        if not self.box_data:
            print("  (Î∞ïÏä§ ÏóÜÏùå)")
        for idx in sorted(self.box_data):
            print(f"  - Ïù¥ÎØ∏ÏßÄ {idx + 1} ({self.image_paths[idx]}):")
            for i, (x, y, w, h) in enumerate(self.box_data[idx]):
                print(f"    [{i}] x={x:.3f}, y={y:.3f}, w={w:.3f}, h={h:.3f}")



        # ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ìï®Ïàò .txtÎ°ú Ï†ÄÏû•ÌïòÍ≥† Ïã∂ÏùÑ ÎïåÎ•º ÏúÑÌï¥ exportÏö© Ìï®Ïàò (Ï∂îÌõÑÏóê)
        def export_boxes_to_txt(self, output_dir="boxes_export"):
            os.makedirs(output_dir, exist_ok=True)
            for idx, boxes in self.box_data.items():
                with open(os.path.join(output_dir, f"{idx + 1}.txt"), "w") as f:
                    for x, y, w, h in boxes:
                        f.write(f"{x:.6f} {y:.6f} {w:.6f} {h:.6f}\n")
            print(f"üìÅ Î∞ïÏä§ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏôÑÎ£å! Ìè¥Îçî: {output_dir}")


    # Ïù¥ÎØ∏ÏßÄ ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    def load_images_from_directory(self, directory):
        supported_ext = (".png", ".jpg", ".jpeg", ".bmp", ".gif")

        def extract_number(filename):
            match = re.search(r'\d+', filename)
            return int(match.group()) if match else float('inf')

        files = [
            os.path.join(directory, f)
            for f in os.listdir(directory)
            if f.lower().endswith(supported_ext)
        ]
        
        return sorted(files, key=lambda x: extract_number(os.path.basename(x)))


    # Ïä¨ÎùºÏù¥Îçî ÏúÑÏπòÏóê Îî∞Îùº Ïù¥ÎØ∏ÏßÄ Ïî¨ ÏóÖÎç∞Ïù¥Ìä∏
    def setup_scene_with_sliding_window(self):
        self.image_offsets = [] #Í∞Å Ïù¥ÎØ∏ÏßÄÏùò ÏãúÏûë XÏ¢åÌëú
        self.scaled_pixmaps = []
        self.total_width = 0
        self.image_scene.clear()

        view_height = self.ui.LineCamera.height()
        offset = 0

        for path in self.image_paths:
            pixmap = self.pixmap_cache.get_pixmap(path)
            if not pixmap or pixmap.isNull():
                continue

            scaled = pixmap.scaledToHeight(view_height, QtCore.Qt.SmoothTransformation)
            self.scaled_pixmaps.append(scaled)

            self.image_offsets.append(offset)
            offset += scaled.width()

        self.total_width = offset
        self.image_scene.setSceneRect(0, 0, self.total_width, view_height)

        self.ui.horizontalScrollBar.setMinimum(0)
        self.ui.horizontalScrollBar.setMaximum(1000)
        self.ui.horizontalScrollBar.valueChanged.connect(self.update_sliding_window)


  
        self.ui.horizontalScrollBar_2.setMinimum(0)
        self.ui.horizontalScrollBar_2.setMaximum(1000)
        self.ui.horizontalScrollBar_2.valueChanged.connect(
            lambda v: print(f"ÏÑúÎ∏å Ïä¨ÎùºÏù¥Îçî ÏúÑÏπò: {v}")
        )
  




    def update_sliding_window(self, value):
        # ‚úÖ Ïä¨ÎùºÏù¥Îçî Ïù¥Îèô Ï†ÑÏóê Î∞ïÏä§ Ï†ÄÏû•
        if hasattr(self, "save_boxes_for_image"):
            self.save_boxes_for_image()

        if not self.image_paths:
            return

        self.image_scene.clear()
        self.label_scene.clear()
        self.custom_line_camera.box_items.clear()

        # Ï†ÑÏ≤¥ ÌïÑÎ¶Ñ ÎÑàÎπÑ Í∏∞Ï§Ä Ïä§ÌÅ¨Î°§ ÏúÑÏπò Í≥ÑÏÇ∞
        scroll_ratio = value / 1000.0
        scroll_x = scroll_ratio * self.total_width

        # self.ui.LineCamera.centerOn(scroll_x, self.ui.LineCamera.height() / 2)  
        # #or
        middle_y = max((scaled.height() for scaled in self.scaled_pixmaps), default=0) / 2
        self.ui.LineCamera.centerOn(scroll_x, middle_y)
        self.ui.drawingNumberView.centerOn(scroll_x, 0) #ÎùºÎ≤® Î∑∞ ÎèôÍ∏∞Ìôî

        font_size = max(10, int(14 * (self.width() / 1920)))
        font = QtGui.QFont("Arial", font_size, QtGui.QFont.Bold)

        # ÌòÑÏû¨ Í∏∞Ï§Ä ÏúÑÏπòÏóêÏÑú Í∑ºÏ≤ò Ïù¥ÎØ∏ÏßÄÎì§Îßå Î∞ïÏä§/ÎùºÎ≤® ÌëúÏãú
        visible_width = self.ui.LineCamera.width()
        left_bound = scroll_x - visible_width
        right_bound = scroll_x + visible_width

        for i, path in enumerate(self.image_paths):
            if i >= len(self.image_offsets):
                continue

            offset = self.image_offsets[i]
            if offset > right_bound or (offset + self.image_width) < left_bound:
                continue  # ÌôîÎ©¥ Î∞ñ Ïù¥ÎØ∏ÏßÄ Ï†úÏô∏

            pixmap = self.pixmap_cache.get_pixmap(path)
            if pixmap.isNull():
                continue

            scaled = self.scaled_pixmaps[i] # ÎØ∏Î¶¨ Ïä§ÏºÄÏùºÎêú pixmap ÏÇ¨Ïö©
            item = QGraphicsPixmapItem(scaled)
            item.setPos(offset, (self.ui.LineCamera.height() - scaled.height()) / 2)
            self.image_scene.addItem(item)

            #  Î∞ïÏä§ Í∑∏Î¶¨Í∏∞
            boxes = self.load_boxes_for_image(i)
            self.draw_boxes_on_scene(boxes, scaled.width(), scaled.height(), offset, img_index=i)

            #  ÎùºÎ≤® ÏúÑÏπò: Ïù¥ÎØ∏ÏßÄ Ï§ëÏã¨ Í∏∞Ï§Ä
            center_x = offset + scaled.width() / 2
            label = QtWidgets.QGraphicsTextItem(f"<== ÎèÑÎ©¥ {i + 1} ==>")
            label.setFont(font)
            label.setDefaultTextColor(QtGui.QColor("black"))
            label_y = (self.ui.drawingNumberView.height() - label.boundingRect().height()) / 2
            label.setPos(center_x - label.boundingRect().width() / 2, label_y)
            self.label_scene.addItem(label)

            label_back = QtWidgets.QGraphicsTextItem(f"{i + 1}")
            label_back.setFont(font)
            label_back.setDefaultTextColor(QtGui.QColor("black"))
            right_x = offset + scaled.width()
            label_back.setPos(right_x - label_back.boundingRect().width(), label_y)
            self.label_scene.addItem(label_back)


        # Ï†ÑÏ≤¥ Ïî¨ ÌÅ¨Í∏∞ Ïû¨ÏÑ§Ï†ï (Í≥†Ï†ïÍ∞í ÏïÑÎãò!)
        self.image_scene.setSceneRect(0, 0, self.total_width, self.ui.LineCamera.height())
        self.label_scene.setSceneRect(0, 0, self.total_width, self.ui.drawingNumberView.height())

    
    # window ÌÅ¨Í∏∞ Ï°∞Ï†ï Ïãú
    def resizeEvent(self, event):
        super().resizeEvent(event)
        
        self.setup_scene_with_sliding_window()
        
        # ÏúÑÏπò Ïû¨Î∞∞Ïπò
        self.green_background_label.setGeometry(self.ui.horizontalScrollBar.geometry())
        self.redline_background_label.setGeometry(self.ui.horizontalScrollBar_2.geometry())
        
        #  ÎÖπÏÉâ Ïä¨ÎùºÏù¥Îìú Ïû¨Í∞±Ïã†
        self.update_green_slide(0.9)
        
     
        QtCore.QTimer.singleShot(0, self.update_tool_button_style)
        QtCore.QTimer.singleShot(0, self.update_fonts_responsive)
        QtCore.QTimer.singleShot(0, self.update_button_min_sizes)
        QtCore.QTimer.singleShot(0, self.update_slider_label_fonts)
        QtCore.QTimer.singleShot(0, self.update_slider_sizes)
        QtCore.QTimer.singleShot(0, self.update_label_view_height)
        QtCore.QTimer.singleShot(0, lambda: self.update_sliding_window(self.ui.horizontalScrollBar.value()))
        
        # resizeEvent ÎÅùÏóê ÏïàÏ†ÑÌïòÍ≤å Ìò∏Ï∂ú
        #  red Ïä¨ÎùºÏù¥Îìú Ïû¨Í∞±Ïã†
        QtCore.QTimer.singleShot(0, lambda: self.update_red_lines([0.15, 0.9]))

    def update_label_view_height(self):
        total_height = self.height()
        label_height = max(30, int(total_height * 0.07))
        self.ui.drawingNumberView.setMinimumHeight(label_height)
        self.ui.drawingNumberView.setMaximumHeight(label_height)



    def send_command(self, cmd):
        print(f"[üõ∞Ô∏è Î™ÖÎ†π] {cmd}")

    def toggle_recording(self):
        if self.ui.toolButton.isChecked():
            self.send_command("Ï¥¨ÏòÅ ÏãúÏûë")
            if self.popup is None:
                self.popup = CameraPopupDialog(self)
                self.popup.setAttribute(QtCore.Qt.WA_DeleteOnClose)
                self.popup.destroyed.connect(self.popup_closed)
                self.popup.show()
        else:
            self.send_command("Ï¥¨ÏòÅ Ï∑®ÏÜå")
            if self.popup:
                self.popup.close()
                self.popup = None

    def popup_closed(self):
        self.ui.toolButton.setChecked(False)
        self.update_tool_button_style()
        self.popup = None

    def toggle_setting_popup(self):
        if self.setting_popup is None:
            self.setting_popup = SettingPopupDialog(self)
            self.setting_popup.setAttribute(QtCore.Qt.WA_DeleteOnClose)
            self.setting_popup.destroyed.connect(lambda: self.clear_popup("setting"))
            self.setting_popup.show()
        else:
            self.setting_popup.close()
            self.setting_popup = None

    def toggle_alarm_popup(self):
        if self.alarm_popup is None:
            self.alarm_popup = AlarmPopupDialog(self)
            self.alarm_popup.setAttribute(QtCore.Qt.WA_DeleteOnClose)
            self.alarm_popup.destroyed.connect(lambda: self.clear_popup("alarm"))
            self.alarm_popup.show()
        else:
            self.alarm_popup.close()
            self.alarm_popup = None

    def clear_popup(self, name):
        if name == "setting":
            self.setting_popup = None
        elif name == "alarm":
            self.alarm_popup = None

    def update_tool_button_style(self):
        w = self.ui.toolButton.width()
        h = self.ui.toolButton.height()
        r = min(w, h) // 2
        self.ui.toolButton.setStyleSheet(f"""
            QToolButton {{
                border-radius: {r}px;
                border: 2px solid red;
                background-color: white;
            }}
            QToolButton:checked {{
                background-color: red;
                border: 2px solid black;
                border-radius: {r}px;
            }}
        """)

    def update_slider_label_fonts(self):
        width_scale = self.width() / 1260
        font_size = max(10, int(14 * width_scale))
        font = QtGui.QFont()
        font.setPointSize(font_size)
        for label in [
            self.ui.leftLabelTop, self.ui.leftLabelBottom,
            self.ui.rightLabelTop, self.ui.rightLabelBottom
        ]:
            label.setFont(font)

    def update_slider_sizes(self):
        base_height = 600
        base_width = 1260
        height_scale = self.height() / base_height
        width_scale = self.width() / base_width
        new_height = int(250 * height_scale)
        new_width = int(14 * width_scale)
        for slider in [self.ui.left, self.ui.right]:
            slider.setMinimumHeight(new_height)
            slider.setStyleSheet(f"""
                QSlider::groove:vertical {{
                    background: #ccc;
                    width: {new_width}px;
                }}
                QSlider::handle:vertical {{
                    background: #116688;
                    border-radius: 20px;
                    height: 30px;
                }}
            """)

    def update_button_min_sizes(self):
        base_width = 1260
        scale = self.width() / base_width
        new_min_size = int(60 * scale)
        for btn in [
            self.ui.auto_drive_button, self.ui.alarm_button, self.ui.return_button,
            self.ui.setting_button, self.ui.up_button, self.ui.down_button,
            self.ui.left_button, self.ui.right_button, self.ui.toolButton
        ]:
            btn.setMinimumSize(new_min_size, new_min_size)

    def update_fonts_responsive(self):
        base_width = 1260
        current_width = self.width()
        scale_factor = current_width / base_width
        base_font_size = 14
        scaled_font_size = int(base_font_size * scale_factor)
        sample_button = self.ui.auto_drive_button
        max_font_size_by_height = int(sample_button.height() * 0.4)
        final_font_size = max(10, min(scaled_font_size, max_font_size_by_height))
        widgets = [
            self.ui.auto_drive_button,
            self.ui.alarm_button,
            self.ui.return_button,
            self.ui.setting_button,
            self.ui.up_button,
            self.ui.down_button,
            self.ui.left_button,
            self.ui.right_button,
            self.ui.toolButton,
        ]
        for widget in widgets:
            font = widget.font()
            font.setPointSize(final_font_size)
            widget.setFont(font)

def prompt_for_port(name="Ìè¨Ìä∏"):
    while True:
        port_str = input(f"{name} Î≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÎòêÎäî 'q' ÏûÖÎ†• Ïãú Ï¢ÖÎ£å): ").strip()
        if port_str.lower() == 'q':
            print("‚ùå ÏÇ¨Ïö©Ïûê Ï¢ÖÎ£å ÏöîÏ≤≠")
            sys.exit(0)
        if port_str.isdigit():
            return int(port_str)
        print("‚ùå ÏûòÎ™ªÎêú ÏûÖÎ†•ÏûÖÎãàÎã§. Ïà´ÏûêÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.")

if __name__ == "__main__":
    CONTROL_PORT = prompt_for_port("CONTROL Ìè¨Ìä∏")
    SEND_IMAGE_PORT = prompt_for_port("Ïù¥ÎØ∏ÏßÄ Ï†ÑÏÜ° Ìè¨Ìä∏")

    app = QApplication(sys.argv)
    window = TrackBotApp()

    # Ìè¨Ìä∏ Ï†ÅÏö©
    window.tcp_client = TcpClient(port=CONTROL_PORT, host="ap.loclx.io")
    window.tcp_client.connect_to_server()

    window.image_client = TcpImageClientWorker(host="ap.loclx.io", port=SEND_IMAGE_PORT)
    window.image_client.image_received.connect(window.handle_image_received)
    window.image_client.error_occurred.connect(lambda msg: print(f"[TCP-IMG Ïò§Î•ò] {msg}"))
    window.image_client.start()

    window.show()
    sys.exit(app.exec_())
